<?xml version="1.0" encoding="utf-8"?>
<project name="fixing the I-D" default="help" basedir=".">

  <property name="rfc.file" location="..\..\doc\security\draft-rundgren-json-canonicalization-scheme.html"/>

  <property name="span.blue" value="&lt;span style=&quot;color:blue&quot;&gt;"/>
  <property name="span.bi" value="&lt;span style=&quot;color:brown&quot;&gt;"/>
  <property name="span.green" value="&lt;span style=&quot;color:green&quot;&gt;"/>

  <target name="help">
    <echo message="Targets: help fixing"/>
  </target>
  
  <resources id="styling.xml">
    <string>
  <![CDATA[
.tftable {border-collapse: collapse}
.tftable th {font-size:10pt;background-color: #f0f0f0;
border-width:1px;padding:4pt 10pt 4pt 10pt;
border-style:solid;border-color: #a9a9a9;text-align:center;font-family:arial,verdana,helvetica}
.tftable tr {background-color:#FFFFE0}
.tftable td {border-width:1px;padding:4pt 8pt 4pt 8pt;border-style:solid;border-color:#a9a9a9}
]]></string>
  </resources>
  <property name="styling" refid="styling.xml"/>
  <!-- No, I'm NOT a regex expert :-( -->
  <target name="fixing">
    <replace file="${rfc.file}" token="return buffer" value="return buffer" failOnNoReplacements="true"/>

  	<fixcrlf file="${rfc.file}" eol="lf"/>

  	<replaceregexp file="${rfc.file}"
        match="(&lt;p&gt;This Internet-Draft will expire.*?&lt;\/p&gt;)"
        replace="\1&lt;p&gt;&lt;i&gt;Note: this document has been slightly &quot;enhanced&quot; to make it more readable.&lt;\/i&gt;&lt;\/p&gt;"
        flags="s"/>
    <replaceregexp file="${rfc.file}"
        match="lightyellow"
        replace="#f0f0f0"
        flags="g"/>
   <replaceregexp file="${rfc.file}"
        match="windows-1252"
        replace="us-ascii"
        flags="g"/>

  	<replaceregexp file="${rfc.file}"
        match="&lt;title&gt;"
        replace="&lt;link rel=&quot;icon&quot; href=&quot;../webpkiorg.png&quot; sizes=&quot;192x192&quot;&gt;&lt;title&gt;"
        flags="g"/>

  	<replaceregexp file="${rfc.file}"
        match="(&lt;pre)(&gt;.*\n?.*&quot;numbers&quot;)"
        replace="\1 style=&quot;padding:1em 0.5em&quot;\2"
        flags="g"/>
    <replaceregexp file="${rfc.file}"
        match="(&lt;pre)(&gt;.*?\n.*&quot;John Doe&quot;)"
        replace="\1 style=&quot;padding:1em 0.5em&quot;\2"
        flags="g"/>
    <replaceregexp file="${rfc.file}"
        match="(&lt;pre)(&gt;.*?\n?.*1\.4e\+9999)"
        replace="\1 style=&quot;padding:1em 0.5em&quot;\2"
        flags="g"/>

  	<replaceregexp file="${rfc.file}"
        match="&lt;ul&gt;\n&lt;li&gt;"
        replace="&lt;ul&gt;&lt;li&gt;"
        flags="g"/>
    <replaceregexp file="${rfc.file}"
        match="&lt;ol&gt;\n&lt;li&gt;"
        replace="&lt;ol&gt;&lt;li&gt;"
        flags="g"/>
    <replaceregexp file="${rfc.file}"
        match="(\n&lt;li)(&gt;)((\d\.){1,4})"
        replace="\1 \2\3"
        flags="gs"/>
    <replaceregexp file="${rfc.file}"
        match="(\n&lt;li)(&gt;)(Appendix)"
        replace="\1 \2\3"
        flags="gs"/>
    <replaceregexp file="${rfc.file}"
        match="(\n&lt;li)(&gt;)(&lt;a href=&quot;#rfc.authors)"
        replace="\1 \2\3"
        flags="gs"/>
    <replaceregexp file="${rfc.file}"
        match="(\n&lt;li)(&gt;)"
        replace="\1 style=&quot;margin-top:0.8em&quot;\2"
        flags="gs"/>
    <replaceregexp file="${rfc.file}"
        match="(&lt;pre)(&gt;.*var canonicalize)"
        replace="\1 style=&quot;padding:1em 0.5em&quot;\2"
        flags="g"/>
    <replaceregexp file="${rfc.file}"
        match="(&lt;pre)(&gt;.*7b\n?)"
        replace="\1 style=&quot;padding:1em 0.5em&quot;\2"
        flags="g"/>
    <replaceregexp file="${rfc.file}"
          match="&lt;p&gt;&lt;/p&gt;.*\n&lt;p&gt;&lt;/p&gt;.*\n.*\n&lt;ul .*ASCII.*\n.*\n"
          replace=""
          flags="g"/>
    <replaceregexp file="${rfc.file}"
          match="\:\&quot;\\u20ac"
          replace=":&quot;&amp;#x20AC;"
          flags="g"/>
    <replaceregexp file="${rfc.file}"
          match="\ \ \&quot;\\u20ac"
          replace="  &quot;&amp;#x20AC;"
          flags="g"/>
    <replaceregexp file="${rfc.file}"
          match="(\= )(JSON)(\.)"
          replace="\1${span.bi}\2&lt;/span&gt;\3"
          flags="g"/>
    <replaceregexp file="${rfc.file}"
          match="(       )(Object)(\.)"
          replace="\1${span.bi}\2&lt;/span&gt;\3"
          flags="g"/>
    <replaceregexp file="${rfc.file}"
          match="( \()(Array)(\.)"
          replace="\1${span.bi}\2&lt;/span&gt;\3"
          flags="g"/>
    <replaceregexp file="${rfc.file}"
          match="(\ )(BigNumber)(\()"
          replace="\1${span.bi}\2&lt;/span&gt;\3"
          flags="g"/>
    <replaceregexp file="${rfc.file}"
          match="(\= )(true|false)(\;)"
          replace="\1${span.blue}\2&lt;/span&gt;\3"
          flags="g"/>
    <replaceregexp file="${rfc.file}"
          match="(\= )(new)(\ )"
          replace="\1${span.blue}\2&lt;/span&gt;\3"
          flags="g"/>
    <replaceregexp file="${rfc.file}"
          match="(  )(return)( buffer)"
          replace="\1${span.blue}\2&lt;/span&gt;\3"
          flags="g"/>
     <replaceregexp file="${rfc.file}"
          match=" if \("
          replace=" ${span.blue}if&lt;/span&gt; ("
          flags="g"/>
    <replaceregexp file="${rfc.file}"
          match="= function\("
          replace="= ${span.blue}function&lt;/span&gt;("
          flags="g"/>
    <replaceregexp file="${rfc.file}"
          match="  function "
          replace="  ${span.blue}function&lt;/span&gt; "
          flags="g"/>
    <replaceregexp file="${rfc.file}"
          match="\} else "
          replace="} ${span.blue}else&lt;/span&gt; "
          flags="g"/>
    <replaceregexp file="${rfc.file}"
          match=" typeof "
          replace=" ${span.blue}typeof&lt;/span&gt; "
          flags="g"/>
    <replaceregexp file="${rfc.file}"
          match="\= null "
          replace="= ${span.blue}null&lt;/span&gt; "
          flags="g"/>
    <replaceregexp file="${rfc.file}"
          match="(    )(//.*)(\n)"
          replace="\1&lt;span style=&quot;color:#808080&quot;&gt;\2&lt;/span&gt;\3"
          flags="g"/>
    <replaceregexp file="${rfc.file}"
          match="  var "
          replace="  ${span.blue}var&lt;/span&gt; "
          flags="g"/>
    <replaceregexp file="${rfc.file}"
          match="  let "
          replace="  ${span.blue}let&lt;/span&gt; "
          flags="g"/>
    <replaceregexp file="${rfc.file}"
          match="'(([\[\]\{\}\,\:a-z]*)|(\{\&quot;.*?))'"
          replace="'${span.green}\1&lt;/span&gt;'"
          flags="g"/>
 
  	<replaceregexp file="${rfc.file}"
          match="(\|\=\=.*)(IEEE-754)(.*)(JSON Representation)(.*)(Comment)(.*\=\=\|)"
          replace="&lt;tr&gt;&lt;th&gt;\2&lt;/th&gt;&lt;th&gt;\4&lt;/th&gt;&lt;th&gt;\6&lt;/th&gt;&lt;/tr&gt;"
          flags="gs"/>
    <replaceregexp file="${rfc.file}"
          match="\|\-\-.*?\-\-\|\n"
          replace=""
          flags="gs"/>
    <replaceregexp file="${rfc.file}"
          match="\|\-\-.*?\-\-\|"
          replace="&lt;/table&gt;"
          flags="gs"/>
    <replaceregexp file="${rfc.file}"
          match="(\|\ )(.*?)(\ \|\ )(.*?)(\ \|\ )(.*?)(\ \|)"
          replace="&lt;tr&gt;&lt;td&gt;&lt;tt style=&quot;font-size:12pt&quot;&gt;\2&lt;/tt&gt;&lt;/td&gt;&lt;td&gt;\4&lt;/td&gt;&lt;td&gt;\6&lt;/td&gt;&lt;/tr&gt;"
          flags="g"/>
    <replaceregexp file="${rfc.file}"
          match="(&lt;pre&gt;)(.*?Zero.*?)(&lt;\/pre&gt;)"
          replace="&lt;table style=&quot;margin-left:3em&quot; class=&quot;tftable&quot;&gt;\2"
          flags="gs"/>
    <replaceregexp file="${rfc.file}"
          match="(&lt;\!\[CDATA\[\*\/\n)"
          replace="\1${styling}"
          flags="gs"/>

  	<replaceregexp file="${rfc.file}"
        match="(&quot;:\ ?)(\d.*?)(\,|\n)"
        replace="\1${span.green}\2\&lt;/span&gt;\3"
        flags="g"/>

  	<replaceregexp file="${rfc.file}"
        match="(( \{?)|(\,))(&quot;)([a-zA-Z0-9]+)(&quot;\:)"
        replace="\1\4&lt;span style=&quot;color:brown&quot;&gt;\5&lt;/span&gt;\6"
        flags="g"/>

  	<replaceregexp file="${rfc.file}"
        match="(\:[\ \n]*&quot;)(.*?)((&quot;)(\,|\n|(\}\&lt;\/pre)))"
        replace="\1&lt;span style=&quot;color:royalblue&quot;&gt;\2\&lt;/span&gt;\3"
        flags="g"/>

  	<replaceregexp file="${rfc.file}"
        match="(\:\ *\[)(.*?)(\,)"
        replace="\1${span.green}\2\&lt;/span&gt;\3"
        flags="g"/>
    <replaceregexp file="${rfc.file}"
        match="(\:\ *\[\n?[\ ]*.*&gt;\,\n?[\ ]*)([a-z0-9\.\-E\+]*)(\]|\,)"
        replace="\1${span.green}\2\&lt;/span&gt;\3"
        flags="g"/>
    <replaceregexp file="${rfc.file}"
        match="(\:\ *\[\n?[\ ]*.*&gt;\,\n?[\ ]*)([a-z0-9\.\-E\+]*)(\]|\,)"
        replace="\1${span.green}\2\&lt;/span&gt;\3"
        flags="g"/>
    <replaceregexp file="${rfc.file}"
        match="(\:\ *\[\n?[\ ]*.*&gt;\,\n?[\ ]*)([a-z0-9\.\-E\+]*)(\]|\,)"
        replace="\1${span.green}\2\&lt;/span&gt;\3"
        flags="g"/>
    <replaceregexp file="${rfc.file}"
        match="(\:\ *\[\n?[\ ]*.*&gt;\,\n?[\ ]*)([a-z0-9\.\-E\+]*)(\]|\,)"
        replace="\1${span.green}\2\&lt;/span&gt;\3"
        flags="g"/>
    <replaceregexp file="${rfc.file}"
        match="(\:\[.*?\n?[\ ]*.*&gt;\,\n?[\ ]*)([a-z0-9\.\-E\+]*)(\]|\,)"
        replace="\1${span.green}\2\&lt;/span&gt;\3"
        flags="g"/>
    <replaceregexp file="${rfc.file}"
        match="(\:\[.*?\n?[\ ]*.*&gt;\,\n?[\ ]*)([a-z0-9\.\-E\+]*)(\]|\,)"
        replace="\1${span.green}\2\&lt;/span&gt;\3"
        flags="g"/>
    <replaceregexp file="${rfc.file}"
        match="(\:\[.*?\n?[\ ]*.*&gt;\,\n?[\ ]*)([a-z0-9\.\-E\+]*)(\]|\,)"
        replace="\1${span.green}\2\&lt;/span&gt;\3"
        flags="g"/>
    <replaceregexp file="${rfc.file}"
        match="(\:\[.*?\n?[\ ]*.*&gt;\,\n?[\ ]*)([a-z0-9\.\-E\+]*)(\]|\,)"
        replace="\1${span.green}\2\&lt;/span&gt;\3"
        flags="g"/>
    <replaceregexp file="${rfc.file}"
        match="(&gt;\,\ )([a-z0-9\.\-]*)(\])"
        replace="\1${span.green}\2\&lt;/span&gt;\3"
        flags="g"/>
    <replaceregexp file="${rfc.file}"
        match="(in most cases would)(.*?)(canonicalized)"
        replace="&lt;i&gt;\1\2\3&lt;/i&gt;"
        flags="gs"/>
    <replaceregexp file="${rfc.file}"
        match="(combined\s*with\s*an\s*elementary\s*sorting\s*scheme)"
        replace="&lt;i&gt;\1&lt;/i&gt;"
        flags="gs"/>
    <replaceregexp file="${rfc.file}"
        match="(at\s*the\s*expense\s*of\s*lost\s*precision)"
        replace="&lt;i&gt;\1&lt;/i&gt;"
        flags="gs"/>
    <replaceregexp file="${rfc.file}"
        match="(and in fact)(.*?)(software)"
        replace="&lt;i&gt;\1\2\3&lt;/i&gt;"
        flags="gs"/>
    <replaceregexp file="${rfc.file}"
        match="(using )(existing)( JSON tools)"
        replace="\1&lt;i&gt;\2&lt;/i&gt;\3"
        flags="gs"/>
  	<fixcrlf file="${rfc.file}" eol="crlf"/>

  </target>

</project>
